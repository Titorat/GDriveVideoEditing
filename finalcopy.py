# -*- coding: utf-8 -*-
"""FinalCopy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sXyhgSTbegu53cF07Y40D5-TEWrEhgNp
"""

from google.colab import drive
drive.mount('/content/drive')

from moviepy.editor import *
import os
from google.colab.patches import cv2_imshow
import cv2
import numpy as np
import csv
import datetime
# GLOBAL VARIABLES
SOURCE_FOLDER = 'drive/My Drive/Video Bot/Video/'
TEMP_FOLDER   = 'drive/My Drive/Video Bot/Temp/'
OUTPUT_FOLDER = 'drive/My Drive/Video Bot/Output/'
IMAGE_FOLDER  = 'drive/My Drive/Video Bot/Images/'
AUDIO_FOLDER  = 'drive/My Drive/Video Bot/Audio/'

# audioFILO = AudioFileClip(AUDIO_FOLDER+'inflo'+'/'+'hubspot audio sample_1.m4a')
# # audioFILO.set_duration(10)
# audioFILO = audioFILO.set_start(5)
# audioFILO2=AudioFileClip(AUDIO_FOLDER+'inflo'+'/'+'thinkgrowth_2.m4a')
# # audioFILO2.set_duration(10)
# merged = CompositeAudioClip([audioFILO,audioFILO2])
# merged.write_audiofile(AUDIO_FOLDER+'a6.mp3',44100)

def CompositeAudioClipReplace(listOfClips):
  mainAudio = listOfClips[0]
  TempList = []
  TempList.append(mainAudio.subclip(0,t_end = listOfClips[1][1]))
  length_clips = len(listOfClips) 
  for c,i in enumerate(listOfClips[1:]):
    TempList.append(i[0])
    x = None
    if c+2 == length_clips:
      x = None
    else:
      x = listOfClips[c+2][1]
    import operator
    startOfClip = tuple(map(operator.add, listOfClips[c+1][1] , divmod(int(listOfClips[c+1][0].duration),60)))
    # print(startOfClip)

    TempList.append(mainAudio.subclip(startOfClip,x).set_start(startOfClip))
  # for c,k in enumerate(TempList):
  #   k.write_audiofile(AUDIO_FOLDER+f'a{c}.mp3',44100)
  return (CompositeAudioClip(TempList))

temp_list_audio = []
temp_list_times = []
def makeAudioLists():
  global temp_list_audio
  temp_list_audio = []
  global temp_list_times
  temp_list_times = []

  name = [i for i in os.listdir(AUDIO_FOLDER) if 'csv' in i][0]
  csv_file = AUDIO_FOLDER + name

  with open(csv_file, mode='r') as csvFile:
    csv_reader = csv.reader(csvFile, delimiter=',')

    for c,row in enumerate(csv_reader):
      temp_list_audio.append(row[0])
      rowTemp = row[1:]
      temp_list_times.append([])

      for i in rowTemp:
        temp_list_times[c].append(i)

  

def mergeAudioFiles(video_name,audio):
  makeAudioLists()
  nameOfAudioFolder = ''
  for c,i in enumerate(temp_list_audio):
    if i in video_name:
      nameOfAudioFolder = AUDIO_FOLDER+i+'/'
      break
    else:
      continue
  # audio.set_ismask(False)
  audioFilesList = [audio]
  audioFileTemp  = []
  for i in os.listdir(nameOfAudioFolder):
    index = int(i[-5:-4])
    audioFileStartTime = temp_list_times[c][index-1]
    ms = divmod(int(audioFileStartTime), 60)
    # ms = audioFileStartTime
    audio_temp = AudioFileClip(nameOfAudioFolder + i)

    audio_temp = audio_temp.set_start(ms)

    # audio_temp.set_ismask(True)
    # print(i)
    # print(ms)
    audioFileTemp.append((audio_temp,ms))
  def bigger(listo):
    minutes = listo[1][0] * 60
    seconds = listo[1][1]
    return (minutes+seconds)
  audioFileTemp = sorted(audioFileTemp,key = bigger )
  audioFilesList.extend(audioFileTemp)
  return (CompositeAudioClipReplace(audioFilesList))

def merge_audio(original_video, video,folder,imageFile):
  audio      = VideoFileClip(original_video).audio
  newAudio   = mergeAudioFiles(original_video,audio)

  final      = VideoFileClip(video).set_audio(newAudio)
  if folder[:-1] in os.listdir(OUTPUT_FOLDER):
    final.write_videofile(OUTPUT_FOLDER+ folder +imageFile[:-4]+'.mp4',threads=4)
  else:
    os.mkdir(OUTPUT_FOLDER+folder[:-1])
    final.write_videofile(OUTPUT_FOLDER+ folder +imageFile[:-4]+'.mp4',threads=4)

def processing(sampleName,folder,imageFile):

  original_video = SOURCE_FOLDER + sampleName
  _name   = TEMP_FOLDER +str(len(os.listdir(TEMP_FOLDER))) +sampleName


  cap = cv2.VideoCapture(original_video)
  if (cap.isOpened()== False): 
    print("Error opening video stream or file")

  lower_green = np.array([0, 100, 0]) 
  upper_green = np.array([75, 255, 162]) 

  # Find OpenCV version
  (major_ver, minor_ver, subminor_ver) = (cv2.__version__).split('.')

  if int(major_ver)  < 3 :
    fps = cap.get(cv2.cv.CV_CAP_PROP_FPS)
    # print ("Frames per second using video.get(cv2.cv.CV_CAP_PROP_FPS): {0}".format(fps))
  else :
    fps = cap.get(cv2.CAP_PROP_FPS)
    # print ("Frames per second using video.get(cv2.CAP_PROP_FPS) : {0}".format(fps))

  frame_width = int(cap.get(3))
  frame_height = int(cap.get(4))

  
  _fourcc = cv2.VideoWriter_fourcc(*'MP4V')
  _out    = cv2.VideoWriter(_name, _fourcc, fps, (frame_width,frame_height))
  _backgroundImage = cv2.imread(IMAGE_FOLDER +folder+imageFile)
  # cv2_imshow(_backgroundImage)

  additional_counter = 0
  counter_ = 0
  minimize_counter = 30

  while(cap.isOpened()):
    # Capture frame-by-frame
    counter = 0
    ret, frame = cap.read()
    if ret == True:
      mask = cv2.inRange(frame, lower_green, upper_green)
      background_width = mask.shape[0]
      background_height= mask.shape[1]
      flag = False
      average = mask.mean(axis=0).mean(axis=0)
      if average > 215:
        flag = True
      elif minimize_counter >0:
        minimize_counter  = minimize_counter - 1
        flag = True



      additional_counter += 1
      if additional_counter % 60 == 0:
        counter_ += 1
        print(counter_)

      # Display the resulting frame
      if flag:
        
        background_width = mask.shape[0]
        background_height= mask.shape[1]
        crop_background = cv2.resize(_backgroundImage,(background_height,background_width))
        crop_background[mask == 0] = [0, 0, 0]
        frame[mask != 0] = [0,0,0]
        final_image = crop_background+frame
        _out.write(final_image)
      else:
        _out.write(frame)
      
  
      # Press Q on keyboard to  exit
      if cv2.waitKey(1) & 0xFF == ord('q'):
        break
  
    # Break the loop
    else: 
      break
  
  # When everything done, release the video capture object
  cap.release()
  _out.release()
  
  # Closes all the frames
  cv2.destroyAllWindows()
  merge_audio(original_video,_name,folder,imageFile)
  os.remove(_name)

list_videos = os.listdir(SOURCE_FOLDER)
print(list_videos)
print(os.listdir(IMAGE_FOLDER))

for j in os.listdir(IMAGE_FOLDER):
  print(j)
  list_images = os.listdir(IMAGE_FOLDER+j)
  for i in list_images:
    nameOfVideo = [x for x in list_videos if j in x]
    if len(nameOfVideo) == 0:
      break
    else:
      nameOfVideo = [x for x in list_videos if j in x][0]
    print(nameOfVideo)
    processing(nameOfVideo, j+'/',i)

!ls "drive/My Drive/Video Bot"